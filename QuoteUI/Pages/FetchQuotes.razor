@page "/"
@page "/fetchquotes"
@using Shared
@inject HttpClient Http

<h1>Quotes</h1>
<div class="row">
    <div class="col-md-6">
        <a href='/quotes/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Quotes
        </a>
    </div>
    <div>Search By:</div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Author"
               @bind="authorQuery" @bind:event="oninput" @onkeyup="FilterQuotes" />
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Tags"
               @bind="tagsQuery" @bind:event="oninput" @onkeyup="FilterQuotes" />
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Quotes"
               @bind="quoteQuery" @bind:event="oninput" @onkeyup="FilterQuotes" />
    </div>
</div>
<br />
@if (quotesList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Author</th>
                <th>Tags</th>
                <th>Quotes</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var quote in quotesList)
            {
                <tr>
                    <td>@quote.Author</td>
                    <td>
                        @foreach (var (tag, index) in quote.Tags.Select((tag, index) => (tag, index)))
                        {
                            @tag
                            @if (index < quote.Tags.Count() - 1)
                            {
                                <span>,</span>
                            }
                        }
                    </td>

                    <td>@quote.QuoteText</td>
                   
                    <td>
                        <a href='/quotes/edit/@quote.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/quotes/delete/@quote.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    protected List<Quote> quotesList = new();
    protected List<Quote> searchUserData = new();
    protected Quote quote = new();
    protected string SearchString { get; set; } = string.Empty;
    // Construct the query string based on the parameters
    private string authorQuery { get; set; } = string.Empty;
    private string tagsQuery { get; set; } = string.Empty;
    private string quoteQuery { get; set; } = string.Empty;
    
   

    protected override async Task OnInitializedAsync()
    {
        await GetQuotes();
    }
    protected async Task GetQuotes()
    {
        quotesList = await Http.GetFromJsonAsync<List<Quote>>("api/Quote");
        searchUserData = quotesList;
        
    }
    protected async Task FilterQuotes()
    {
        string queryString = "";

        if (!string.IsNullOrWhiteSpace(authorQuery))
        {
            queryString += $"author={Uri.EscapeDataString(authorQuery)}&";
        }

        if (!string.IsNullOrWhiteSpace(tagsQuery))
        {
            queryString += $"tags={Uri.EscapeDataString(tagsQuery)}&";
        }

        if (!string.IsNullOrWhiteSpace(quoteQuery))
        {
            queryString += $"quote={Uri.EscapeDataString(quoteQuery)}&";
        }

        // Remove the trailing '&' if any
        if (!string.IsNullOrEmpty(queryString))
        {
            queryString = "?" + queryString.TrimEnd('&');
        }
        quotesList = await Http.GetFromJsonAsync<List<Quote>>("api/Quote/Search" + queryString);
    }
    protected void DeleteConfirm(int Id)
    {
        quote = quotesList.FirstOrDefault(x => x.Id == Id);
    }
    
}

